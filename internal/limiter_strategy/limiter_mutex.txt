package limiterstrategy

import (
	"errors"
	"log"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/evandrojr/go-rate-limiter/configs"
	"github.com/kr/pretty"
)

var (
	segundoRegistrado int64
	acessosMutex      sync.Mutex
	Acessos           acessos
)

var tokenNotFound = "TOKEN_NOT_FOUND"
var exceedIpLimit = "limite de acessos por IP excedido para o IP: "
var exceedTokenLimit = "limite de acessos por token excedido para o token: "

const LIMITED_MESSAGE = "you have reached the maximum number of requests or actions allowed within a certain time frame"

type acessoRecord struct {
	NumeroAcessosNoSegundo int
	BloqueadoAte           int64
}

type acessos struct {
	Ip     map[string]acessoRecord
	Tokens map[string]acessoRecord
}

var envConfig configs.EnvConfig

func (l LimiterStrategyStruct) Init(secReg int64, configs configs.EnvConfig) {
	Initialize(secReg, configs)
}

func Initialize(secReg int64, configs configs.EnvConfig) {
	envConfig = configs
	acessosMutex.Lock()
	Acessos = acessos{
		Ip:     make(map[string]acessoRecord),
		Tokens: make(map[string]acessoRecord),
	}
	acessosMutex.Unlock()
	atomic.StoreInt64(&segundoRegistrado, secReg)
}

func bloquearIp(segundoAtual int64, ip string) {
	acessosMutex.Lock()
	defer acessosMutex.Unlock()
	Acessos.Ip[ip] = acessoRecord{
		NumeroAcessosNoSegundo: Acessos.Ip[ip].NumeroAcessosNoSegundo,
		BloqueadoAte:           segundoAtual + int64(envConfig.BlockIpTime),
	}
}

func bloquearToken(segundoAtual int64, token string) {
	acessosMutex.Lock()
	defer acessosMutex.Unlock()
	Acessos.Tokens[token] = acessoRecord{
		NumeroAcessosNoSegundo: Acessos.Tokens[token].NumeroAcessosNoSegundo,
		BloqueadoAte:           segundoAtual + int64(envConfig.BlockTokenTime),
	}
}

func verificaBloqueio(segundoAtual int64, ip string, token string) error {
	acessosMutex.Lock()
	defer acessosMutex.Unlock()
	if Acessos.Ip[ip].BloqueadoAte >= segundoAtual {
		return errors.New("IP bloqueado até " + strconv.FormatInt(Acessos.Ip[ip].BloqueadoAte, 10))
	}
	if Acessos.Tokens[token].BloqueadoAte >= segundoAtual {
		return errors.New("Token bloqueado até " + strconv.FormatInt(Acessos.Tokens[token].BloqueadoAte, 10))
	}
	return nil
}

func (l LimiterStrategyStruct) ValidaAcesso(segundo int64, ip string, token string) error {
	return validaAcesso(segundo, ip, token)
}

func validaAcesso(segundo int64, ip string, token string) error {
	if err := verificaBloqueio(segundo, ip, token); err != nil {
		log.Println(err)
		return errors.New(LIMITED_MESSAGE)
	}

	if err := registraAcessoToken(segundo, token); err != nil {
		if err.Error() == tokenNotFound {
			if ipErr := registraAcessoIp(segundo, ip); ipErr != nil {
				log.Println(ipErr)
				bloquearIp(segundo, ip)
				return errors.New(LIMITED_MESSAGE)
			}
			return nil
		}
		log.Println(err)
		bloquearToken(segundo, token)
		return err
	}
	return nil
}

func registraAcessoIp(segundo int64, ip string) error {
	if segundo != atomic.LoadInt64(&segundoRegistrado) {
		atomic.StoreInt64(&segundoRegistrado, segundo)
		acessosMutex.Lock()
		Acessos.Ip[ip] = acessoRecord{}
		acessosMutex.Unlock()
	}

	acessosMutex.Lock()
	defer acessosMutex.Unlock()
	pretty.Println(Acessos.Ip[ip])
	if Acessos.Ip[ip].NumeroAcessosNoSegundo >= envConfig.IpMaxReqPerSecond {
		return errors.New(exceedIpLimit + ip)
	}

	Acessos.Ip[ip] = acessoRecord{
		NumeroAcessosNoSegundo: Acessos.Ip[ip].NumeroAcessosNoSegundo + 1,
		BloqueadoAte:           Acessos.Ip[ip].BloqueadoAte,
	}
	return nil
}

func registraAcessoToken(segundo int64, token string) error {
	if envConfig.TokensMaxReqPerSecond[token] == 0 {
		log.Println(tokenNotFound)
		return errors.New(tokenNotFound)
	}

	if segundo != atomic.LoadInt64(&segundoRegistrado) {
		atomic.StoreInt64(&segundoRegistrado, segundo)
		acessosMutex.Lock()
		Acessos.Tokens[token] = acessoRecord{}
		acessosMutex.Unlock()
	}

	acessosMutex.Lock()
	defer acessosMutex.Unlock()
	pretty.Println(Acessos.Tokens[token])
	if Acessos.Tokens[token].NumeroAcessosNoSegundo >= envConfig.TokensMaxReqPerSecond[token] {
		return errors.New(exceedTokenLimit + token)
	}

	Acessos.Tokens[token] = acessoRecord{
		NumeroAcessosNoSegundo: Acessos.Tokens[token].NumeroAcessosNoSegundo + 1,
		BloqueadoAte:           Acessos.Tokens[token].BloqueadoAte,
	}
	return nil
}
